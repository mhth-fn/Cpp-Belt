Принцип работы программы
I. Считывание и пополнение базы данных
II. Считывание реквестов
III. Обработка реквестов
IV. Вывод результатов обработки
----------------------------------------------------I-------------------------------------------------------
С помощью паттерна билдер будем инициализировать нашу базу данных, вызывая ReadData(). Теперь нужно подумать,
как наша база данных будет устроенна.

class Database{
public: 
	/* Something */
private:
	What????
}

1. Нужно хранить остановку и ее координаты. Для этого отлично подойдет hash-map.
	        unordered_map<string, Coordinates> stops_base_;

2. Нужно хранить номер автобуса и последовательность его остановок
	      unordered_map<string, route> routebus_base-;
где 

struct Route{
	vector<string> stops_;
	is_circled = false;
}

4. ">" - последовательный маршрут, просто считываем циклом for;

5. "-" - цикличный маршрут. Если маршрут цикличный, то просто выставляем флаг is_circled в положение true;
---------------------------------------------------II---------------------------------------------------------
Каждый реквест -- потомок базового класса.
Считываем реквест > создаем умный указатель на потомка > записываем в вектор request
--------------------------------------------------III---------------------------------------------------------
Итерируемся по вектору, последовательно вызываем метод Process() у его элементов и записываем ответ в 
результирующий вектор response
---------------------------------------------------IV---------------------------------------------------------
Итерируемся по вектору response, выводим данные в поток cin
