Структуры данных:
Set, vector, list, array, map, deque, queue, stack
---------------------------------------------------
Идеи по id

1) id -- индекс в массиве.
Минусы: замысловатая конструкция для удаления элемента
(например, если вместо удаленного объекта записывать
нуль терминатор).
Плюсы: т.к. известно общее количество запросов, то можно
заранее зарезервировать 10^6 индексов и добиться константной
сложности для добавления (просто move объекта), проверки
и удаления.

2) id -- указатель на объект в куче
Минусы: дополнительная структура для хранения всех существующих
объектов (указателей). К примеру, если будем хранить множество
всех указателей, то проверка существования, добавление и удаление
будет занимать logN. 
Плюсы: простота реализации

3) id -- итератор на элемент в контейнере
Минусы: Для проверки существования нужно завести set<typename 
set<T>::iterator>, куда складывать все итераторы. Задействовано 
будет больше памяти, нежели при втором методе.
Плюсы: реализация еще более простая, нежели с указателем
-----------------------------------------------------
Идеи по структуре данных в классе PriorityCollection

Что я хочу от класса?
1. Получать объект по его id.
2. Получать\удалять объект с максимальным приоритетом.
3. Повышать объект в очереди приоритетов. --проблемный момент
Решение: модифицированная priority_queue с возможностью изменять
приоритет каждого элемента.


